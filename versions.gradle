/*
 * Copyright (c).
 * TT-Technologies IT-Service GmbH
 */

/**
 * Android config build version
 */

def build_versions = [:]
build_versions.min_sdk = 21
build_versions.target_sdk = 28
build_versions.compile_sdk = 28
build_versions.version_code = 1
build_versions.version_name = "1.1.0"
ext.build_versions = build_versions

ext.deps = [:]

def versions = [:]

/**
 * Gradle {@see https://gradle.org/}
 */
versions.android_gradle_plugin = '3.2.1'

/**
 * Google
 */
versions.support = "28.0.0"
versions.room = "1.1.1"
versions.lifecycle = "1.1.1"
versions.constraint_layout = "1.1.0"
versions.dagger = "2.22.1"
versions.paging = "1.0.1"
versions.guava_android = "27.1-android"
versions.guava_jre = "27.1-jre"
versions.multidex = "1.0.3"
versions.gson = "2.8.5"
versions.customtabs = "27.0.2"
versions.flexbox = "1.0.0"
versions.exifinterface = "27.0.1"

versions.work = "1.0.1"

versions.play_services = "16.0.0"
versions.play_services_map = "16.1.0"

/**
 * https://firebase.google.com/docs/cloud-messaging/android/client
 */
versions.firebase_messaging = "17.3.4"
versions.firebase_core = "16.0.1"
versions.firebase_dynamic_links = "16.1.8"

/**
 * ExoPlayer is an application level media player for Android.
 * It provides an alternative to Android’s MediaPlayer API for playing audio and video both locally and over the Internet.
 * ExoPlayer supports features not currently supported by Android’s MediaPlayer API,
 * including DASH and SmoothStreaming adaptive playbacks. Unlike the MediaPlayer API,
 * ExoPlayer is easy to customize and extend, and can be updated through Play Store application updates.
 * {@see https://github.com/google/ExoPlayer}
 * {@see https://google.github.io/ExoPlayer/}
 */
versions.exoplayer = "2.9.2"

/**
 * Facebook
 * https://github.com/facebook/fresco
 */
versions.fresco = "1.13.0"
versions.keyframes = "1.0"
/**
 * http://facebook.github.io/stetho/
 * A debug bridge for Android applications
 * Stetho is a sophisticated debug bridge for Android applications.
 * When enabled, developers have access to the Chrome Developer Tools feature natively part of the Chrome desktop browser.
 * Developers can also choose to enable the optional dumpapp tool which offers a powerful command-line interface to application internals.
 *
 * Chrome DevTools
 * The integration with the Chrome DevTools frontend is implemented using a client/server protocol which the Stetho software provides for your application.
 * Once your application is integrated, simply navigate to chrome://inspect and click "Inspect" to get started!
 *
 * Network Inspection
 * Network inspection is possible with the full spectrum of Chrome Developer Tools features,
 * including image preview, JSON response helpers, and even exporting traces to the HAR format.
 */
versions.stetho = "1.5.0"

/**
 * Square {@see http://square.github.io/}
 */
versions.retrofit = "2.6.0"
versions.okhttp = "3.14.2"

/**
 * Bumptech {@see https://bumptech.github.io/glide/}
 */
versions.glide = "4.9.0"

/**
 * ReactiveX {@see http://reactivex.io/}
 */
versions.rxjava2 = "2.1.3"
versions.rx_android = "2.0.1"

/**
 * AndroidJUnitRunner and JUnit Rules
 * Espresso
 */
versions.support_test = "1.0.2"
versions.espresso = "3.0.2"

/**
 * JUnit 4 framework
 */
versions.junit = "4.12"

/**
 * Mockito framework
 */
versions.mockito = "2.10.0"

/**
 * Assertj
 */
versions.assertj = "3.11.1"

versions.robolectric = "4.1"

/**
 * Automatic binding+disposal of RxJava 2 streams. https://uber.github.io/AutoDispose/
 * https://github.com/uber/AutoDispose
 */
versions.autodispose = "0.7.0"

/**
 * Render After Effects animations natively on Android and iOS, Web, and React Native http://airbnb.io/lottie/
 */
versions.lottie = "2.7.0"

/**
 * Apache Commons Net
 * Apache Commons Net™ library implements the client side of many basic Internet protocols.
 * The purpose of the library is to provide fundamental protocol access, not higher-level abstractions.
 * Therefore, some of the design violates object-oriented design principles.
 * Our philosophy is to make the global functionality of a protocol accessible
 * (e.g., TFTP send file and receive file) when possible, but also provide access to the fundamental
 * protocols where applicable so that the programmer may construct his own custom implementations
 * (e.g, the TFTP packet classes and the TFTP packet send and receive methods are exposed).
 *
 * Features
 * Supported protocols include:
 *
 * FTP/FTPS
 * FTP over HTTP (experimental)
 * NNTP
 * SMTP(S)
 * POP3(S)
 * IMAP(S)
 * Telnet
 * TFTP
 * Finger
 * Whois
 * rexec/rcmd/rlogin
 * Time (rdate) and Daytime
 * Echo
 * Discard
 * NTP/SNTP
 *
 * http://commons.apache.org/proper/commons-net/
 */
versions.commons_net = "3.6"

/**
 * A memory leak detection library for Android and Java.
 * https://github.com/square/leakcanary
 */
versions.leakcanary = "1.6.3"

/**
 * Library support for Kotlin coroutines with multiplatform support. This is a companion version for Kotlin 1.3.20 release.
 */
versions.kotlinx_coroutines_core = "1.1.1"

versions.joda_time = "2.10.2"
versions.joda_time_no_tzdb = "2.10.2:no-tzdb"

/**
 * Dependencies
 */
def deps = [:]

/**
 * Android gradle
 */
deps.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"

/**
 * Support Library Features Guide {@see https://developer.android.com/topic/libraries/support-library/features}
 */
def support = [:]
support.annotations = "com.android.support:support-annotations:$versions.support"
support.app_compat = "com.android.support:appcompat-v7:$versions.support"
support.recyclerview = "com.android.support:recyclerview-v7:$versions.support"
support.cardview = "com.android.support:cardview-v7:$versions.support"
support.design = "com.android.support:design:$versions.support"
support.v4 = "com.android.support:support-v4:$versions.support"
support.v14 = "com.android.support:preference-v14:$versions.support"
support.core_utils = "com.android.support:support-core-utils:$versions.support"
support.emoji = "com.android.support:support-emoji:$versions.support"
support.emoji_appcompat = "com.android.support:support-emoji-appcompat:$versions.support"
support.emoji_bundled = "com.android.support:support-emoji-bundled:$versions.support"
support.exifinterface = "com.android.support:exifinterface:$versions.exifinterface"
deps.support = support

deps.constraint_layout = "com.android.support.constraint:constraint-layout:$versions.constraint_layout"

deps.paging = "android.arch.paging:runtime:$versions.paging"

deps.multidex = "com.android.support:multidex:$versions.multidex"

deps.gson = "com.google.code.gson:gson:$versions.gson"

deps.customtabs = "com.android.support:customtabs:$versions.customtabs"

deps.flexbox = "com.google.android:flexbox:$versions.flexbox"

deps.autodispose = "com.uber.autodispose:autodispose:$versions.autodispose"

deps.lottie = "com.airbnb.android:lottie:$versions.lottie"

def google_service = [:]
google_service.firebase_messaging = "com.google.firebase:firebase-messaging:$versions.firebase_messaging"
google_service.firebase_core = "com.google.firebase:firebase-core:$versions.firebase_core"
google_service.firebase_dynamic_links = "com.google.firebase:firebase-dynamic-links:$versions.firebase_dynamic_links"
google_service.play_services_location = "com.google.android.gms:play-services-location:$versions.play_services"
google_service.play_services_maps = "com.google.android.gms:play-services-maps:$versions.play_services_map"
deps.google_service = google_service

/**
 * Android Architecture Components
 * {@see https://developer.android.com/topic/libraries/architecture/}
 * {@see https://developer.android.com/topic/libraries/architecture/adding-components}
 */
def room = [:]
room.runtime = "android.arch.persistence.room:runtime:$versions.room"
room.compiler = "android.arch.persistence.room:compiler:$versions.room"
room.rxjava2 = "android.arch.persistence.room:rxjava2:$versions.room"
room.guava = "android.arch.persistence.room:guava:$versions.room"
room.testing = "android.arch.persistence.room:testing:$versions.room"
deps.room = room

def lifecycle = [:]
lifecycle.runtime = "android.arch.lifecycle:runtime:$versions.lifecycle"
lifecycle.extensions = "android.arch.lifecycle:extensions:$versions.lifecycle"
lifecycle.java8 = "android.arch.lifecycle:common-java8:$versions.lifecycle"
lifecycle.compiler = "android.arch.lifecycle:compiler:$versions.lifecycle"
deps.lifecycle = lifecycle

def work = [:]
work.work_runtime = "android.arch.work:work-runtime:$versions.work"
work.work_runtime_ktx = "android.arch.work:work-runtime-ktx:$versions.work"
work.work_rxjava2 = "android.arch.work:work-rxjava2:$versions.work"
work.work_testing = "android.arch.work:work-testing:$versions.work"
deps.work = work

deps.exoplayer = "com.google.android.exoplayer:exoplayer:$versions.exoplayer"

/**
 * Guava {@see https://github.com/google/guava}
 */
def guava = [:]
guava.android = "com.google.guava:guava:$versions.guava_android"
guava.jre = "com.google.guava:guava:$versions.guava_jre"
deps.guava = guava

/**
 * Retrofit A type-safe HTTP client for Android and Java {@see http://square.github.io/retrofit/}
 */
def retrofit = [:]
retrofit.runtime = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.mock = "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"
deps.retrofit = retrofit

/**
 * Okhttp An HTTP & HTTP/2 client for Android and Java applications {@see http://square.github.io/okhttp/}
 */
def okhttp = [:]
okhttp.okhttp_logging_interceptor = "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"
okhttp.okhttp = "com.squareup.okhttp3:okhttp:$versions.okhttp"
deps.okhttp = okhttp

deps.commons_net = "commons-net:commons-net:$versions.commons_net"

/**
 * ReactiveX An API for asynchronous programming with observable streams
 * {@see https://github.com/ReactiveX/RxJava}
 * {@see https://github.com/ReactiveX/RxAndroid}
 */
def rx = [:]
rx.java2 = "io.reactivex.rxjava2:rxjava:$versions.rxjava2"
rx.android = "io.reactivex.rxjava2:rxandroid:$versions.rx_android"
deps.rx = rx

/**
 * Dagger is a fully static, compile-time dependency injection framework for both Java and Android.
 * It is an adaptation of an earlier version created by Square and now maintained by Google.
 * {@see https://google.github.io/dagger/}
 */
def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android:$versions.dagger"
dagger.android_support = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:$versions.dagger"
deps.dagger = dagger

/**
 * Glide is a fast and efficient image loading library for Android focused on smooth scrolling.
 * Glide offers an easy to use API, a performance and extensible resource decoding pipeline and automatic resource pooling.
 * {@see https://bumptech.github.io/glide/}
 */
def glide = [:]
glide.glide = "com.github.bumptech.glide:glide:$versions.glide"
glide.annotations = "com.github.bumptech.glide:annotations:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
deps.glide = glide

/**
 * Facebook
 * https://developers.facebook.com/docs/facebook-login/android?locale=vi_VN
 */
def facebook = [:]
facebook.fresco = "com.facebook.fresco:fresco:$versions.fresco"
facebook.keyframes = "com.facebook.keyframes:keyframes:$versions.keyframes"
facebook.stetho = "com.facebook.stetho:stetho:$versions.stetho"
deps.facebook = facebook

/**
 * AndroidJUnitRunner and JUnit Rules
 */
def support_test = [:]
support_test.runner = "com.android.support.test:runner:$versions.support_test"
support_test.rules = "com.android.support.test:rules:$versions.support_test"
deps.support_test = support_test

/**
 * Espresso dependencies
 */
def espresso = [:]
espresso.core = "com.android.support.test.espresso:espresso-core:$versions.espresso"
espresso.contrib = "com.android.support.test.espresso:espresso-contrib:$versions.espresso"
espresso.intents = "com.android.support.test.espresso:espresso-intents:$versions.espresso"
espresso.accessibility = "com.android.support.test.espresso:espresso-accessibility:$versions.espresso"
espresso.web = "com.android.support.test.espresso:espresso-web:$versions.espresso"
espresso.idling_concurrent = "com.android.support.test.espresso.idling:idling-concurrent:$versions.espresso"
espresso.idling_resource = "com.android.support.test.espresso:espresso-idling-resource:$versions.espresso"
deps.espresso = espresso

/**
 * JUnit 4 framework
 */
deps.junit = "junit:junit:$versions.junit"

/**
 * Mockito framework
 */
deps.mockito = "org.mockito:mockito-core:$versions.mockito"

deps.assertj = "org.assertj:assertj-core:$versions.assertj"

deps.robolectric = "org.robolectric:robolectric:$versions.robolectric"


def leakcanary = [:]
leakcanary.debug = "com.squareup.leakcanary:leakcanary-android:$versions.leakcanary"
leakcanary.release = "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leakcanary"
// Optional, if you use support library fragments:
leakcanary.support_fragment = "com.squareup.leakcanary:leakcanary-support-fragment:$versions.leakcanary"
deps.leakcanary = leakcanary

deps.kotlinx_coroutines_core = "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.kotlinx_coroutines_core"

deps.joda_time_no_tzdb = "joda-time:joda-time:$versions.joda_time_no_tzdb"
deps.joda_time = "joda-time:joda-time:$versions.joda_time"

ext.deps = deps

/**
 * Add repositories {@see build.gradle}
 * @param handler
 * @return repositories
 */
static def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.mavenCentral()
    handler.maven { url 'https://maven.google.com' }
    handler.maven { url 'https://maven.fabric.io/public' }
}

ext.addRepos = this.&addRepos
